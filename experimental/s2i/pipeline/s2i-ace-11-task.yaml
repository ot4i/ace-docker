apiVersion: tekton.dev/v1beta1
kind: Task
metadata:
  creationTimestamp: '2021-02-05T13:22:27Z'
  generation: 5
  managedFields:
    - apiVersion: tekton.dev/v1beta1
      fieldsType: FieldsV1
      fieldsV1:
        'f:spec':
          .: {}
          'f:description': {}
          'f:params': {}
          'f:results': {}
          'f:steps': {}
          'f:volumes': {}
          'f:workspaces': {}
      manager: Mozilla
      operation: Update
      time: '2021-02-05T16:22:14Z'
  name: s2i-ace-12
  namespace: default
  resourceVersion: '85012'
  selfLink: /apis/tekton.dev/v1beta1/namespaces/default/tasks/s2i-ace-12
  uid: cae07417-e01f-4458-96d9-41e7af690e11
spec:
  description: >-
    s2i-ace-12 task clones a Git repository and builds and pushes a container
    image using S2I and an ACE 12 builder image. Credit to
    https://github.com/openshift/pipelines-catalog/blob/master/task/s2i-java-11/0.1/s2i-java-11.yaml
  params:
    - default: .
      description: The location of the path to run s2i from
      name: PATH_CONTEXT
      type: string
    - default: not_accept
      description: Must be set to "accept" to run
      name: LICENSE
      type: string
    - default: 'true'
      description: >-
        Verify the TLS on the registry endpoint (for push/pull to a non-TLS
        registry)
      name: TLSVERIFY
      type: string
    - description: Location of the repo where image has to be pushed
      name: IMAGE
      type: string
    - default: 'quay.io/buildah/stable:v1.17.0'
      description: The location of the buildah builder image.
      name: BUILDER_IMAGE
      type: string
  results:
    - description: Digest of the image just built.
      name: IMAGE_DIGEST
  steps:
    - args:
        - |-
          echo "LICENSE=$(params.LICENSE)" > env-file

          echo "Generated Env file"
          echo "------------------------------"
          cat env-file
          echo "------------------------------"
          echo "Contents of /env-params"
          echo "------------------------------"
          ls -l /env-params
          echo "------------------------------"
          echo "Contents of /"
          echo "------------------------------"
          ls -l /
          echo "------------------------------"
      command:
        - /bin/sh
        - '-c'
      image: quay.io/openshift-pipeline/s2i
      name: gen-env-file
      resources: {}
      volumeMounts:
        - mountPath: /env-params
          name: envparams
      workingDir: /env-params
    - command:
        - ls
        - '-l'
        - /env-params
      image: quay.io/openshift-pipeline/s2i
      name: list
      resources: {}
      volumeMounts:
        - mountPath: /gen-source
          name: gen-source
        - mountPath: /env-params
          name: envparams
      workingDir: $(workspaces.source.path)
    - command:
        - s2i
        - build
        - $(params.PATH_CONTEXT)
        - 'tdolby/experimental:ace-s2i-hybrid-image'
        - '--image-scripts-url'
        - 'image:///usr/local/s2i'
        - '--as-dockerfile'
        - /gen-source/Dockerfile.gen
        - '--environment-file'
        - /env-params/env-file
      image: quay.io/openshift-pipeline/s2i
      name: generate
      resources: {}
      volumeMounts:
        - mountPath: /gen-source
          name: gen-source
        - mountPath: /env-params
          name: envparams
      workingDir: $(workspaces.source.path)
    - command:
        - buildah
        - bud
        - '--storage-driver=vfs'
        - '--tls-verify=$(params.TLSVERIFY)'
        - '--layers'
        - '-f'
        - /gen-source/Dockerfile.gen
        - '-t'
        - $(params.IMAGE)
        - .
      image: $(params.BUILDER_IMAGE)
      name: build
      resources: {}
      volumeMounts:
        - mountPath: /var/lib/containers
          name: varlibcontainers
        - mountPath: /gen-source
          name: gen-source
      workingDir: /gen-source
    - command:
        - buildah
        - push
        - '--storage-driver=vfs'
        - '--tls-verify=$(params.TLSVERIFY)'
        - '--digestfile=$(workspaces.source.path)/image-digest'
        - $(params.IMAGE)
        - 'docker://$(params.IMAGE)'
      image: $(params.BUILDER_IMAGE)
      name: push
      resources: {}
      volumeMounts:
        - mountPath: /var/lib/containers
          name: varlibcontainers
      workingDir: $(workspaces.source.path)
    - image: $(params.BUILDER_IMAGE)
      name: digest-to-results
      resources: {}
      script: >-
        cat $(workspaces.source.path)/image-digest | tee
        /tekton/results/IMAGE_DIGEST
  volumes:
    - emptyDir: {}
      name: varlibcontainers
    - emptyDir: {}
      name: gen-source
    - emptyDir: {}
      name: envparams
  workspaces:
    - mountPath: /workspace/source
      name: source
