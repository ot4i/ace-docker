FROM alpine:3.14

# docker build -t ace-minimal:12.0.2.0-alpine-openjdk16 -f Dockerfile.alpine-openjdk16 .

MAINTAINER Trevor Dolby <tdolby@uk.ibm.com> (@tdolby)

ARG LICENSE
ARG DOWNLOAD_URL=http://public.dhe.ibm.com/ibmdl/export/pub/software/websphere/integration/12.0.2.0-ACE-LINUX64-DEVELOPER.tar.gz
ARG PRODUCT_LABEL=ace-12.0.2.0
ARG JDK_DOWNLOAD_URL=https://download.java.net/java/GA/jdk16.0.1/7147401fd7354114ac51ef3e1328291f/9/GPL/openjdk-16.0.1_linux-x64_bin.tar.gz
ARG JDK_LABEL=jdk-16.0.1


RUN apk --update add --no-cache --virtual .build-deps curl binutils zstd \
    && GLIBC_VER="2.31-r0" \
    && ALPINE_GLIBC_REPO="https://github.com/sgerrand/alpine-pkg-glibc/releases/download" \
    && GCC_LIBS_URL="https://archive.archlinux.org/packages/g/gcc-libs/gcc-libs-10.1.0-2-x86_64.pkg.tar.zst" \
    && GCC_LIBS_SHA256=f80320a03ff73e82271064e4f684cd58d7dbdb07aa06a2c4eea8e0f3c507c45c \
    && ZLIB_URL="https://archive.archlinux.org/packages/z/zlib/zlib-1%3A1.2.11-4-x86_64.pkg.tar.xz" \
    && ZLIB_SHA256=43a17987d348e0b395cb6e28d2ece65fb3b5a0fe433714762780d18c0451c149 \
    && curl -Ls https://alpine-pkgs.sgerrand.com/sgerrand.rsa.pub -o /etc/apk/keys/sgerrand.rsa.pub \
    && curl -Ls ${ALPINE_GLIBC_REPO}/${GLIBC_VER}/glibc-${GLIBC_VER}.apk > /tmp/${GLIBC_VER}.apk \
    && apk add /tmp/${GLIBC_VER}.apk \
    && curl -Ls ${GCC_LIBS_URL} -o /tmp/gcc-libs.tar.zst \
    && echo "${GCC_LIBS_SHA256}  /tmp/gcc-libs.tar.zst" | sha256sum -c - \
    && mkdir /tmp/gcc \
    && zstd -d /tmp/gcc-libs.tar.zst \
    && tar -xf /tmp/gcc-libs.tar -C /tmp/gcc \
    && mv /tmp/gcc/usr/lib/libgcc* /tmp/gcc/usr/lib/libstdc++* /usr/glibc-compat/lib \
    && strip /usr/glibc-compat/lib/libgcc_s.so.* /usr/glibc-compat/lib/libstdc++.so* \
    && curl -Ls ${ZLIB_URL} -o /tmp/libz.tar.xz \
    && echo "${ZLIB_SHA256}  /tmp/libz.tar.xz" | sha256sum -c - \
    && mkdir /tmp/libz \
    && tar -xf /tmp/libz.tar.xz -C /tmp/libz \
    && mv /tmp/libz/usr/lib/libz.so* /usr/glibc-compat/lib \
    && apk del --purge .build-deps \
    && rm -rf /tmp/${GLIBC_VER}.apk /tmp/gcc /tmp/gcc-libs.tar* /tmp/libz /tmp/libz.tar* /var/cache/apk/* \
    && mkdir /usr/glibc-compat/zlib-only \
    && ( cd /usr/glibc-compat/lib && tar -cf - libz* ) | ( cd /usr/glibc-compat/zlib-only && tar -xf - ) \
    && apk add 'apk-tools>2.12.5-r1'

ENV TZ=Europe/London

# Set up exclusions
COPY excludes*txt /tmp/

RUN cat /tmp/excludes-base.txt >> /tmp/all-excludes.txt && \
# Adapters are optional
    cat /tmp/excludes-adapters.txt >> /tmp/all-excludes.txt && \
# CICS is optional
    cat /tmp/excludes-cics.txt >> /tmp/all-excludes.txt && \
# FTE is optional
    cat /tmp/excludes-fte.txt >> /tmp/all-excludes.txt && \
# GlobalCache is optional; set MQSI_NO_CACHE_SUPPORT=1 but note that 11.0.0.9 will print harmless error messages
    cat /tmp/excludes-globalcache.txt >> /tmp/all-excludes.txt && \
# IMS is optional
    cat /tmp/excludes-ims.txt >> /tmp/all-excludes.txt && \
# JDK provided by base layer; use MQSI_SIGNAL_EXCLUSIONS=11 and 
# MQSI_NON_IBM_JAVA=1 for non-IBM Java layers
    cat /tmp/excludes-jdk.txt >> /tmp/all-excludes.txt && \
# Kafka has log4j-1.2.17
    cat /tmp/excludes-kafka.txt >> /tmp/all-excludes.txt && \
# node.js support is optional; use --no-nodejs on server start line
    cat /tmp/excludes-nodejs.txt >> /tmp/all-excludes.txt && \
# NPM install support is optional
    cat /tmp/excludes-npm.txt >> /tmp/all-excludes.txt && \
# ODBC drivers are optional
    cat /tmp/excludes-odbc.txt >> /tmp/all-excludes.txt && \
# XSLT nodes are optional
    cat /tmp/excludes-xmlt.txt >> /tmp/all-excludes.txt && \
# Toolkit is optional
    cat /tmp/excludes-tools.txt >> /tmp/all-excludes.txt && \
# Web UI support optional; use --admin-rest-api -1 on server start line
    cat /tmp/excludes-webui.txt >> /tmp/all-excludes.txt && \
# WSRR nodes are optional
    cat /tmp/excludes-wsrr.txt >> /tmp/all-excludes.txt && \
# XSLT nodes are optional
    cat /tmp/excludes-xmlt.txt >> /tmp/all-excludes.txt

# Set the env vars mentioned above
COPY profile-with-openjdk16-paths.sh /etc/profile.d/profile-with-openjdk16-paths.sh
COPY openjdk16-paths.sh /etc/profile.d/openjdk16-paths.sh


# Install openjdk
RUN mkdir -p /opt/ibm && \
    apk add binutils zip bash curl && \
    cd /opt && \
    curl ${JDK_DOWNLOAD_URL} | tar -xzf - && \
    /opt/${JDK_LABEL}/bin/jlink --strip-debug --no-man-pages --no-header-files --output /opt/openjdk-16 --add-modules java.base,java.compiler,java.datatransfer,java.instrument,java.logging,java.management,java.management.rmi,java.naming,java.net.http,java.prefs,java.rmi,java.scripting,java.se,java.security.jgss,java.security.sasl,java.sql,java.sql.rowset,java.transaction.xa,java.xml,java.xml.crypto,jdk.accessibility,jdk.attach,jdk.charsets,jdk.compiler,jdk.crypto.cryptoki,jdk.crypto.ec,jdk.dynalink,jdk.hotspot.agent,jdk.internal.ed,jdk.internal.jvmstat,jdk.internal.le,jdk.internal.opt,jdk.internal.vm.ci,jdk.jartool,jdk.jcmd,jdk.jconsole,jdk.jdeps,jdk.jdi,jdk.jdwp.agent,jdk.jfr,jdk.jlink,jdk.management,jdk.management.agent,jdk.management.jfr,jdk.naming.dns,jdk.naming.rmi,jdk.net,jdk.nio.mapmode,jdk.sctp,jdk.security.auth,jdk.security.jgss,jdk.unsupported,jdk.xml.dom,jdk.zipfs && \
    rm -rf /opt/${JDK_LABEL} && \
    apk del --purge binutils zip curl ncurses-terminfo-base ncurses-libs


# Install ACE v12.0.2.0
RUN mkdir -p /opt/ibm && \
    apk add binutils zip bash curl mksh && \
    cd /opt && \
    echo Downloading package ${DOWNLOAD_URL} && \
    curl ${DOWNLOAD_URL} \
    | tar zx --exclude-from=/tmp/all-excludes.txt --directory /opt/ibm && \
    mv /opt/ibm/${PRODUCT_LABEL} /opt/ibm/ace-12 && \
    find /opt/ibm -name "*.so*" -exec strip {} ";" && \
    find /opt/ibm -name "*.wrk" -exec strip {} ";" && \
    find /opt/ibm -name "*.lil" -exec strip {} ";" && \
    ( strip /opt/ibm/ace-12/server/bin/* 2>/dev/null || /bin/true ) && \
    zip -d /opt/ibm/ace-12/common/classes/IntegrationAPI.jar BIPmsgs_de.properties BIPmsgs_es.properties BIPmsgs_fr.properties BIPmsgs_it.properties BIPmsgs_ja.properties BIPmsgs_ko.properties BIPmsgs_pl.properties BIPmsgs_pt_BR.properties BIPmsgs_ru.properties BIPmsgs_tr.properties BIPmsgs_zh.properties BIPmsgs_zh_HK.properties BIPmsgs_zh_TW.properties && \
    apk del --purge binutils zip curl ncurses-terminfo-base ncurses-libs && \
    addgroup mqbrkrs && \
    cat /etc/profile.d/openjdk16-paths.sh >> /root/.bashrc && \
    mkdir /opt/ibm/ace-12/common/jdk && \
    ln -s /opt/openjdk-16 /opt/ibm/ace-12/common/jdk/jre

# Issues with 5.1.4(1)-release (x86_64-alpine-linux-musl) on alpine
RUN sed -i 's/\/bin\/bash/\/bin\/mksh/g' /opt/ibm/ace-12/ace /opt/ibm/ace-12/server/bin/mqsicreateworkdir /opt/ibm/ace-12/server/bin/mqsipackagebar

RUN bash -c '. /etc/profile.d/openjdk16-paths.sh && /opt/ibm/ace-12/ace make registry global accept license deferred'

# Set BASH_ENV to source mqsiprofile when using docker exec bash -c
ENV BASH_ENV=/etc/profile.d/profile-with-openjdk16-paths.sh

# Create a user to run as, create the ace workdir, and chmod script files
RUN ( echo "Passw0rd" ; echo "Passw0rd" ) | adduser -u 1001 -h /home/aceuser -s /bin/bash aceuser mqbrkrs && \
    adduser aceuser mqbrkrs && \
    ( chmod 664 /etc/profile.d/* || /bin/true ) && \
    cat /etc/profile.d/openjdk16-paths.sh >> /home/aceuser/.bashrc && \
    chown aceuser /home/aceuser/.bashrc && \
    chmod 664 /home/aceuser/.bashrc && \
    su - aceuser -c "export LICENSE=accept && . /etc/profile.d/profile-with-openjdk16-paths.sh && /opt/ibm/ace-12/server/bin/mqsicreateworkdir /home/aceuser/ace-server" && \
    echo ". /etc/profile.d/profile-with-openjdk16-paths.sh" >> /home/aceuser/.bashrc

# aceuser
USER 1001

# Leaving this blank to avoid issues with openshift
#ENTRYPOINT ["bash"]
